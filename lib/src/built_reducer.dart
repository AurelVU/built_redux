import 'package:built_value/built_value.dart';

import 'action.dart';
import 'typedefs.dart';
// import 'built_reducer.g.dart';

abstract class BuiltReducer<V extends Built<V, B>, B extends Builder<V, B>> implements Built<V, B> {
  /// This is a map, not a single function with switch statement as per js redux implementation.
  /// This is so each reducer can have the action payload generic be a different non dynamic value
  Map<String, Reducer<V, B, dynamic>> get reducers;

  void reduce(B builder, Action<dynamic> a) {
    var reducer = reducers[a.name];
    // TODO: warn if payload type doesn't match reducer
    if (reducer != null) reducer(builder, a);

    reduceChildren(builder, a);
  }

  /// Generated by the transformer for developer convienience
  /// Is implemented here as a noop to avoid anaylisis issues
  void reduceChildren(B builder, Action<dynamic> a) {}
}

class ReducerBuilder<B> {
  var _map = new Map<String, Reducer>();

  add<T>(ActionName<T> aName, Reducer<T, dynamic, B> reducer) => _map[aName.name] = reducer;

  build() => _map;
}
